{"version":3,"sources":["List.tsx","utils/getNames.ts","utils/getRand.ts","utils/getWinner.ts","Randomizer.tsx","Upload.tsx","App.tsx","index.tsx"],"names":["List","fileContents","useContext","AppContext","map","f","className","Math","floor","Amount","substring","getNames","names","Set","forEach","add","array","i","length","j","random","shuffleArray","Array","from","slice","getRand","max","getWinner","ticketArr","push","rand","winnerId","winner","find","id","name","getTimer","timer","Promise","res","setTimeout","Randomizer","useState","setWinner","spinnerName","setSpinnerName","spin","useCallback","a","_winner","onClick","Upload","error","setError","setFileContents","parseFile","fileEvent","currentTarget","files","Papa","parse","header","skipEmptyLines","message","complete","results","contents","data","filter","d","type","accept","onChange","createContext","App","Provider","value","src","process","alt","Object","keys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a45b36a6.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { AppContext } from './App'\n\nconst List = () => {\n  const { fileContents } = useContext(AppContext)\n\n  return (\n    <div>\n      <h2>Ticket holders</h2>\n      {fileContents.map((f: any) => (\n        <div className=\"ticketRow\">\n          <div className=\"ticketId\">\n            <strong>ID:</strong> {f['Transaction ID']}\n          </div>\n          <div className=\"ticketName\">\n            <strong>Name:</strong> {f['Name of sender/receiver']}\n          </div>\n          <div className=\"ticketCount\">\n            <strong>Tickets:</strong> {Math.floor(f.Amount.substring(1))}\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default List\n","function shuffleArray(array: string[]): string[] {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[array[i], array[j]] = [array[j], array[i]]\n  }\n\n  return array\n}\n\nconst getNames = (fileContents: object[]): string[] => {\n  const names = new Set<string>()\n\n  fileContents.forEach((f: any) => {\n    names.add(f['Name of sender/receiver'])\n  })\n\n  return shuffleArray(Array.from(names)).slice(0, 100)\n}\n\nexport default getNames\n","const getRand = (max: number) => Math.floor(Math.random() * (Math.floor(max) + 1))\n\nexport default getRand\n","import { Winner } from '../Randomizer'\nimport getRand from './getRand'\n\nconst getWinner = (fileContents: object[]): Winner => {\n  const ticketArr: any[] = []\n\n  fileContents.forEach((f: any) => {\n    for (let i = 0; i < Math.floor(f.Amount.substring(1)); i++) {\n      ticketArr.push(f['Transaction ID'])\n    }\n  })\n\n  const rand = getRand(ticketArr.length - 1)\n\n  const winnerId = ticketArr[rand]\n\n  const winner: any = fileContents.find((f: any) => f['Transaction ID'] === winnerId)\n\n  return {\n    id: winner['Transaction ID'],\n    name: winner['Name of sender/receiver'],\n  }\n}\n\nexport default getWinner\n","import { useCallback, useContext, useRef, useState } from 'react'\nimport { AppContext } from './App'\nimport getNames from './utils/getNames'\nimport getRand from './utils/getRand'\nimport getWinner from './utils/getWinner'\n\nexport interface Winner {\n  id: string\n  name: string\n}\n\nconst getTimer = (timer: number) =>\n  new Promise<void>(res => {\n    setTimeout(() => {\n      res()\n    }, timer)\n  })\n\nconst Randomizer = () => {\n  const { fileContents } = useContext(AppContext)\n  const [winner, setWinner] = useState<Winner | null>(null)\n  const [spinnerName, setSpinnerName] = useState<string>('')\n\n  const spin = useCallback(async () => {\n    // grab the winner\n    const _winner = getWinner(fileContents)\n    setWinner(_winner)\n\n    // This is just for show\n    const names = getNames(fileContents)\n\n    const timer = 100\n\n    for (let i = 0; i < timer; --i) {\n      await getTimer(i * 50)\n\n      setSpinnerName(names[i])\n    }\n\n    setTimeout(() => {\n      setSpinnerName(_winner.name)\n    }, 1000)\n  }, [fileContents])\n\n  return <>{!winner ? <button onClick={spin}>Get Winner</button> : <div>{spinnerName}</div>}</>\n}\n\nexport default Randomizer\n","import { ChangeEvent, useCallback, useContext, useState } from 'react'\nimport { AppContext } from './App'\nimport Papa from 'papaparse'\n\nconst Upload = () => {\n  const [error, setError] = useState<string | null>(null)\n  const { setFileContents } = useContext(AppContext)\n\n  const parseFile = useCallback(\n    (fileEvent: ChangeEvent<HTMLInputElement> | null) => {\n      if (fileEvent?.currentTarget?.files) {\n        Papa.parse(fileEvent.currentTarget.files[0], {\n          header: true,\n          skipEmptyLines: true,\n          error: error => {\n            setError(error.message)\n          },\n          complete: results => {\n            const contents = !results.data\n              ? []\n              : results.data.filter(\n                  (d: any) => d['Transaction Type'] === 'Received P2P' && d['Status'] === 'PAYMENT DEPOSITED'\n                )\n\n            setFileContents(contents as object[])\n          },\n        })\n      }\n    },\n    [setFileContents]\n  )\n\n  return (\n    <div className=\"uploadForm\">\n      {error && <h2>{error}</h2>}\n      <form>\n        <label>\n          Upload your file\n          <input type=\"file\" accept=\".csv\" onChange={parseFile} />\n        </label>\n      </form>\n    </div>\n  )\n}\n\nexport default Upload\n","import { createContext, useState } from 'react'\nimport List from './List'\nimport Randomizer from './Randomizer'\nimport Upload from './Upload'\n\ninterface IAppContext {\n  fileContents: object[]\n  setFileContents: (fileContents: object[]) => void\n}\n\nexport const AppContext = createContext<IAppContext>({\n  fileContents: [],\n  setFileContents: (fileContents: object[]) => null,\n})\n\nconst App = () => {\n  const [fileContents, setFileContents] = useState<object[]>([])\n\n  return (\n    <AppContext.Provider value={{ fileContents, setFileContents }}>\n      <div className=\"container\">\n        <header>\n          <h1>\n            <img className=\"mainLogo\" src={`${process.env.PUBLIC_URL}/logo.png`} alt=\"logo\" />\n            Tattoo Raffle\n          </h1>\n          {Object.keys(fileContents).length === 0 ? (\n            <Upload />\n          ) : (\n            <>\n              <Randomizer />\n              <List />\n            </>\n          )}\n        </header>\n      </div>\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}